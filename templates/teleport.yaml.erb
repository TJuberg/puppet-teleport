---
# By default, this file should be stored in /etc/teleport.yaml

# This section of the configuration file applies to all teleport
# services.
teleport:
  # nodename allows to assign an alternative name this node can be reached by.
  # by default it's equal to hostname
  nodename: <%= scope.lookupvar('teleport::nodename') %>

<% if ![:undef, nil].include?(scope.lookupvar("teleport::data_dir")) -%>
  # Data directory where Teleport keeps its data, like keys/users for
  # authentication (if using the default BoltDB back-end)
  data_dir: <%= scope.lookupvar('teleport::data_dir') -%>
<% end -%>

<% if ![:undef, nil].include?(scope.lookupvar("teleport::auth_token")) -%>
  # one-time invitation token used to join a cluster. it is not used on
  # subsequent starts
  auth_token: <%= scope.lookupvar('teleport::auth_token') -%>
<% end -%>

<% if ![:undef, nil].include?(scope.lookupvar("teleport::advertise_ip")) -%>
  # when running in multi-homed or NATed environments Teleport nodes need
  # to know which IP it will be reachable at by other nodes
  advertise_ip: <%= scope.lookupvar('teleport::advertise_ip') -%>
<% end -%>

  # list of auth servers in a cluster. you will have more than one auth server
  # if you configure teleport auth to run in HA configuration
  auth_servers:
<% scope.lookupvar('teleport::auth_servers').flatten.each do |server| -%>
    - <%= server %>
<% end -%>

  # Teleport throttles all connections to avoid abuse. These settings allow
  # you to adjust the default limits
  connection_limits:
    max_connections: <%= scope.lookupvar('teleport::max_connections') %>
    max_users: <%= scope.lookupvar('teleport::max_users') %>

  # Logging configuration. Possible output values are 'stdout', 'stderr' and
  # 'syslog'. Possible severity values are INFO, WARN and ERROR (default).
  log:
    output: <%= scope.lookupvar('teleport::log_dest') %>
    severity: <%= scope.lookupvar('teleport::log_level') %>

<% if ![:undef, nil].include?(scope.lookupvar("teleport::storage_backend")) -%>
  # Type of storage used for keys. You need to configure this to use etcd
  # backend if you want to run Teleport in HA configuration.
  storage:
    type: <%= scope.lookupvar('teleport::storage_backend') %>
<% scope.lookupvar('teleport::storage_options').sort.each do |key,value| -%>
    <%= key %>: <%= value %>
<% end -%>
<% end -%>

# This section configures the 'auth service':
auth_service:
  # Turns 'auth' role on. Default is 'yes'
  enabled: <%= scope.lookupvar('teleport::auth_enable') %>

  authentication:
    # default authentication type. possible values are 'local', 'oidc' and 'saml'
    # only local authentication (Teleport's own user DB) is supported in the open
    # source version
    type: <%= scope.lookupvar('teleport::auth_type') %>
    # second_factor can be off, otp, or u2f
    second_factor: <%= scope.lookupvar('teleport::auth_second_factor') %>
<% if scope.lookupvar('teleport::auth_second_factor') == 'u2f' -%>
    # this section is used if second_factor is set to 'u2f'
    u2f:
      # app_id must point to the URL of the Teleport Web UI (proxy) accessible
      # by the end users
      app_id: <%= scope.lookupvar('teleport::auth_u2f_app_id') %>
      # facets must list all proxy servers if there are more than one deployed
      facets:
<% scope.lookupvar('teleport::auth_u2f_facets').flatten.each do |facet| -%>
        - <%= facet %>
<% end -%>
<% end -%>

  # IP and the port to bind to. Other Teleport nodes will be connecting to
  # this port (AKA "Auth API" or "Cluster API") to validate client
  # certificates
  listen_addr: <%= scope.lookupvar('teleport::auth_listen_addr') -%>:<%= scope.lookupvar('teleport::auth_listen_port') %>

  # Pre-defined tokens for adding new nodes to a cluster. Each token specifies
  # the role a new node will be allowed to assume. The more secure way to
  # add nodes is to use `ttl node add --ttl` command to generate auto-expiring
  # tokens.
  #
  # We recommend to use tools like `pwgen` to generate sufficiently random
  # tokens of 32+ byte length.
<% unless scope.lookupvar('teleport::auth_service_tokens').empty? -%>
  tokens:
<% scope.lookupvar('teleport::auth_service_tokens').flatten.each do |token| -%>
    - <%= token %>
<% end -%>
<% end -%>

<% unless ![:undef, nil].include?(scope.lookupvar("teleport::auth_cluster_name")) -%>
  # Optional "cluster name" is needed when configuring trust between multiple
  # auth servers. A cluster name is used as part of a signature in certificates
  # generated by this CA.
  #
  # By default an automatically generated GUID is used.
  #
  # IMPORTANT: if you change cluster_name, it will invalidate all generated
  # certificates and keys (may need to wipe out /var/lib/teleport directory)
  cluster_name: "<%= scope.lookupvar('teleport::auth_cluster_name') %>"
<% end -%>

# This section configures the 'node service':
ssh_service:
  # Turns 'ssh' role on. Default is 'yes'
  enabled: <%= scope.lookupvar('teleport::ssh_enable') %>

  # IP and the port for SSH service to bind to.
  listen_addr: <%= scope.lookupvar('teleport::ssh_listen_addr') -%>:<%= scope.lookupvar('teleport::ssh_listen_port') %>
  # See explanation of labels in "Labeling Nodes" section below
<% unless scope.lookupvar('teleport::labels').empty? -%>
  labels:
<% scope.lookupvar('teleport::labels').sort.each do |key,value| -%>
    <%= key %>: <%= value %>
<% end -%>
<% end -%>

<% unless scope.lookupvar('teleport::ssh_label_commands').empty? -%>
  # List of the commands to periodically execute. Their output will be used as node labels.
  # See "Labeling Nodes" section below for more information.
  commands:
<% scope.lookupvar('teleport::ssh_label_commands').flatten.each do |command| -%>
    - name: <%= command['arch'] %>
      command: <%= command['command'] %>
      period: <%= command['period'] %>
<% end -%>
<% end -%>

  # enables reading ~/.tsh/environment before creating a session. by default
  # set to false, can be set true here or as a command line flag.
  permit_user_env: <%= scope.lookupvar('teleport::ssh_permit_user_env') %>

# This section configures the 'proxy servie'
proxy_service:
  # Turns 'proxy' role on. Default is 'yes'
  enabled: <%= scope.lookupvar('teleport::proxy_enable') %>

  # SSH forwarding/proxy address. Command line (CLI) clients always begin their
  # SSH sessions by connecting to this port
  listen_addr: <%= scope.lookupvar('teleport::proxy_listen_addr') -%>:<%= scope.lookupvar('teleport::proxy_listen_port') %>

  # Reverse tunnel listening address. An auth server (CA) can establish an
  # outbound (from behind the firewall) connection to this address.
  # This will allow users of the outside CA to connect to behind-the-firewall
  # nodes.
  tunnel_listen_addr: <%= scope.lookupvar('teleport::proxy_tunnel_listen_addr') -%>:<%= scope.lookupvar('teleport::proxy_tunnel_listen_port') %>

  # The HTTPS listen address to serve the Web UI and also to authenticate the
  # command line (CLI) users via password+HOTP
  web_listen_addr: <%= scope.lookupvar('teleport::proxy_web_listen_addr') -%>:<%= scope.lookupvar('teleport::proxy_web_listen_port') %>

<% if scope.lookupvar('teleport::proxy_ssl') == true -%>
  # TLS certificate for the HTTPS connection. Configuring these properly is
  # critical for Teleport security.
  https_key_file: <%= scope.lookupvar('teleport::proxy_ssl_key') %>
  https_cert_file: <%= scope.lookupvar('teleport::proxy_ssl_cert') %>
<% end -%>
